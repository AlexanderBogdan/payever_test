// Generated by CoffeeScript 1.10.0
(function() {
  var App;

  Backbone.Marionette.Region.prototype.attachHtml = function(view) {
    this.$el.hide();
    this.$el.html(view.el);
    this.$el.fadeIn('fast');
  };

  App = new Backbone.Marionette.Application;

  App.addRegions({
    main: '#app'
  });

  App.on('start', function() {
    if (Backbone.history) {
      Backbone.history.start();
    }
  });

  window.App = App;

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery', function(Gallery, App, Backbone, Marionette, $, _) {
    var API;
    Gallery.Router = (function(superClass) {
      extend(Router, superClass);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.appRoutes = {
        '': 'showAlbums',
        'albums/:id': 'showImages',
        'albums/:id/page/:page': 'showImages',
        '*notFound': 'showAlbums'
      };

      return Router;

    })(Marionette.AppRouter);
    API = {
      showAlbums: function() {
        App.Gallery.Albums.Controller.showAlbumList();
      },
      showImages: function(id, page) {
        App.Gallery.Albums.Controller.showAlbumDetail(id, page);
      }
    };
    Gallery.Layout = (function(superClass) {
      extend(Layout, superClass);

      function Layout() {
        return Layout.__super__.constructor.apply(this, arguments);
      }

      Layout.prototype.events = {
        'click .navbar a.home': 'handleRouting'
      };

      Layout.prototype.template = '#app-layout-template';

      Layout.prototype.regions = {
        content: '#content'
      };

      Layout.prototype.handleRouting = function(e) {
        e.preventDefault();
        Backbone.history.navigate('', true);
      };

      return Layout;

    })(Marionette.LayoutView);
    App.addInitializer(function() {
      new Gallery.Router({
        controller: API
      });
    });
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Images', function(Images, App, Backbone, Marionette, $, _) {
    Images.Collection = (function(superClass) {
      extend(Collection, superClass);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.fetch = function(options, album_id, page) {
        options = options || {};
        options.url = '/albums/' + album_id + '/images';
        if (page) {
          options.url += '?page=' + page;
        }
        return Backbone.Collection.prototype.fetch.call(this, options);
      };

      Collection.prototype.parse = function(response) {
        this.pager = response.pager;
        return response.data;
      };

      return Collection;

    })(Backbone.Collection);
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Images', function(Images, App, Backbone, Marionette, $, _) {
    Images.Model = (function(superClass) {
      extend(Model, superClass);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      return Model;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Images', function(Images, App, Backbone, Marionette, $, _) {
    Images.Views = {};
    Images.Views.ImageItemView = (function(superClass) {
      extend(ImageItemView, superClass);

      function ImageItemView() {
        return ImageItemView.__super__.constructor.apply(this, arguments);
      }

      ImageItemView.prototype.className = 'col-sm-5ths col-xs-6';

      ImageItemView.prototype.template = '#image-item-view-template';

      return ImageItemView;

    })(Marionette.ItemView);
    Images.Views.ImageCollectionView = (function(superClass) {
      extend(ImageCollectionView, superClass);

      function ImageCollectionView() {
        return ImageCollectionView.__super__.constructor.apply(this, arguments);
      }

      ImageCollectionView.prototype.className = 'row';

      ImageCollectionView.prototype.childView = Images.Views.ImageItemView;

      ImageCollectionView.prototype.collectionEvents = {
        'sync': 'render'
      };

      ImageCollectionView.prototype.onBeforeRender = function() {
        if (this.collection.pager && this.collection.pager.pageCount > 1) {
          this.triggerMethod('generate:pager', this.collection.pager);
        }
      };

      return ImageCollectionView;

    })(Marionette.CollectionView);
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Albums', function(Albums, App, Backbone, Marionette, $, _) {
    Albums.Collection = (function(superClass) {
      extend(Collection, superClass);

      function Collection() {
        return Collection.__super__.constructor.apply(this, arguments);
      }

      Collection.prototype.url = '/albums';

      Collection.prototype.parse = function(response) {
        return response.data;
      };

      return Collection;

    })(Backbone.Collection);
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  App.module('Gallery.Albums', function(Albums, App, Backbone, Marionette, $, _) {
    Albums.Controller = {
      showAlbumList: function() {
        var albumCollection, albumCollectionPromise, albumsListView, layout;
        albumCollection = new Albums.Collection;
        albumsListView = new Albums.Views.AlbumCollectionView({
          collection: albumCollection
        });
        albumCollectionPromise = albumCollection.fetch();
        layout = new App.Gallery.Layout;
        layout.render();
        App.getRegion('main').show(layout);
        albumCollectionPromise.done(function() {
          layout.showChildView('content', albumsListView);
        });
      },
      showAlbumDetail: function(id, page) {
        var album, albumDetailLayoutView, albumDetailsItemView, albumPromise, imageCollection, imageCollectionPromise, imagesListView, layout;
        page = page || 1;
        album = new Albums.Model({
          id: id
        });
        imageCollection = new App.Gallery.Images.Collection;
        layout = new App.Gallery.Layout;
        layout.render();
        albumDetailLayoutView = new Albums.Views.AlbumDetailLayoutView;
        albumDetailLayoutView.render();
        albumDetailsItemView = new Albums.Views.AlbumDetailItemView({
          model: album
        });
        imagesListView = new App.Gallery.Images.Views.ImageCollectionView({
          collection: imageCollection
        });
        App.getRegion('main').show(layout);
        layout.showChildView('content', albumDetailLayoutView);
        albumPromise = album.fetch();
        imageCollectionPromise = imageCollection.fetch(null, id, page);
        albumPromise.done(function() {
          albumDetailLayoutView.getRegion('albumDetail').show(albumDetailsItemView);
        });
        imageCollectionPromise.done(function() {
          albumDetailLayoutView.getRegion('albumImages').show(imagesListView);
        });
      }
    };
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Albums', function(Albums, App, Backbone, Marionette, $, _) {
    Albums.Model = (function(superClass) {
      extend(Model, superClass);

      function Model() {
        return Model.__super__.constructor.apply(this, arguments);
      }

      Model.prototype.url = function() {
        return '/albums/' + this.id;
      };

      Model.prototype.parse = function(response) {
        return response.data;
      };

      return Model;

    })(Backbone.Model);
  });

}).call(this);

// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App.module('Gallery.Albums', function(Albums, App, Backbone, Marionette, $, _) {
    Albums.Views = {};
    Albums.Views.AlbumItemView = (function(superClass) {
      extend(AlbumItemView, superClass);

      function AlbumItemView() {
        return AlbumItemView.__super__.constructor.apply(this, arguments);
      }

      AlbumItemView.prototype.className = 'col-sm-5ths';

      AlbumItemView.prototype.events = {
        'click a': 'handleRouting'
      };

      AlbumItemView.prototype.template = '#album-item-view-template';

      AlbumItemView.prototype.handleRouting = function(e) {
        var id;
        e.preventDefault();
        id = $(e.target).data('album-id');
        Backbone.history.navigate('albums/' + id, true);
      };

      return AlbumItemView;

    })(Marionette.ItemView);
    Albums.Views.AlbumDetailItemView = (function(superClass) {
      extend(AlbumDetailItemView, superClass);

      function AlbumDetailItemView() {
        return AlbumDetailItemView.__super__.constructor.apply(this, arguments);
      }

      AlbumDetailItemView.prototype.template = '#album-item-detail-view-template';

      AlbumDetailItemView.prototype.modelEvents = {
        'sync': 'render'
      };

      return AlbumDetailItemView;

    })(Marionette.ItemView);
    Albums.Views.AlbumCollectionView = (function(superClass) {
      extend(AlbumCollectionView, superClass);

      function AlbumCollectionView() {
        return AlbumCollectionView.__super__.constructor.apply(this, arguments);
      }

      AlbumCollectionView.prototype.className = 'row';

      AlbumCollectionView.prototype.childView = Albums.Views.AlbumItemView;

      AlbumCollectionView.prototype.collectionEvents = {
        'sync': 'render'
      };

      return AlbumCollectionView;

    })(Marionette.CollectionView);
    Albums.Views.AlbumDetailLayoutView = (function(superClass) {
      extend(AlbumDetailLayoutView, superClass);

      function AlbumDetailLayoutView() {
        return AlbumDetailLayoutView.__super__.constructor.apply(this, arguments);
      }

      AlbumDetailLayoutView.prototype.template = '#album-detail-layout-view-template';

      AlbumDetailLayoutView.prototype.childEvents = {
        'generate:pager': 'onGeneratePager'
      };

      AlbumDetailLayoutView.prototype.regions = {
        'albumDetail': '#album-detail',
        'albumImages': '#album-images',
        'albumPager': '#album-pager'
      };

      AlbumDetailLayoutView.prototype.onGeneratePager = function(childView, pager) {
        var pagerView;
        pagerView = Marionette.ItemView.extend({
          events: {
            'click a': 'handlePageRouting'
          },
          tagName: 'ul',
          className: 'pagination',
          template: function() {
            var ul;
            ul = $('<ul></ul>');
            if (pager.firstPageInRange > pager.first) {
              ul.append('<li><a href="#" data-page="' + pager.first + '">&laquo; First</a></li>');
              ul.append('<li><a href="#" data-page="' + pager.previous + '">&lsaquo; Prev</a></li>');
              ul.append('<li class="disabled"><span>...</span></li>');
            }
            pager.pagesInRange.map(function(item) {
              var li, link;
              li = $('<li></li>');
              link = $('<a href="#" data-page="' + item + '">' + item + '</a>');
              if (item === pager.current) {
                li.addClass('active');
                link = $('<span>' + item + '</span>');
              }
              li.html(link);
              ul.append(li);
            });
            if (pager.lastPageInRange < pager.last) {
              ul.append('<li class="disabled"><span>...</span></li>');
              ul.append('<li><a href="#" data-page="' + pager.next + '">Next &rsaquo;</a></li>');
              ul.append('<li><a href="#" data-page="' + pager.last + '">Last &raquo;</a></li>');
            }
            return $(ul).html();
          },
          handlePageRouting: function(e) {
            var pageNum, path;
            e.preventDefault();
            path = Backbone.history.getFragment().split('/').slice(0, 2);
            pageNum = $(e.target).data('page');
            path.push('page');
            path.push(pageNum);
            Backbone.history.navigate(path.join('/'), true);
          }
        });
        this.albumPager.show(new pagerView);
      };

      return AlbumDetailLayoutView;

    })(Marionette.LayoutView);
  });

}).call(this);
